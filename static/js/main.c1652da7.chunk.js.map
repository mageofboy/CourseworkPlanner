{"version":3,"sources":["Program.js","Requirement.js","App.js","serviceWorker.js","index.js"],"names":["coursedata","require","Programs","props","state","list","items","this","React","Component","List","filtered","handleChange","bind","setState","nextProps","e","newList","target","value","filter","item","lc","toLowerCase","includes","className","type","onChange","placeholder","map","key","to","pathname","temp","Requirement","data","location","name","hasmajor","hasminor","majorreq","minorreq","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mxknCAKMA,EAAaC,EAAQ,IAGrBC,E,YACF,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAML,GAHS,E,sEAQf,OACI,6BACI,kBAAC,EAAD,CAAMM,MAAOC,KAAKH,MAAMC,Y,GAXjBG,IAAMC,WAiBrBC,E,YACF,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTO,SAAU,IAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALL,E,iFASnBN,KAAKO,SAAS,CACZH,SAAUJ,KAAKJ,MAAMG,U,gDAICS,GACxBR,KAAKO,SAAS,CACZH,SAAUI,EAAUT,U,mCAITU,GAEb,IAEIC,EAAU,GASZA,EANqB,KAAnBD,EAAEE,OAAOC,MAEGZ,KAAKJ,MAAMG,MAIHc,OAAO,SAAAC,GAE3B,IAAMC,EAAKD,EAAI,KAASE,cAElBH,EAASJ,EAAEE,OAAOC,MAAMI,cAI9B,OAAOD,EAAGE,SAASJ,KAIXb,KAAKJ,MAAMG,MAGvBC,KAAKO,SAAS,CACZH,SAAUM,M,+BAKR,OACE,6BACI,yBAAKQ,UAAU,UACX,2BAAOC,KAAK,OAAOD,UAAU,QAAQE,SAAUpB,KAAKK,aAAcgB,YAAY,cAC9E,4BACKrB,KAAKH,MAAMO,SAASkB,IAAI,SAAAR,GAAI,OACzB,wBAAIS,IAAKT,EAAI,MAOT,kBAAC,IAAD,CAAMU,GAAI,CACRC,SAAS,cACT5B,MAAO,CAAC,KAAOiB,KAEdA,EAAI,gB,GAxElBb,IAAMC,WAkFZP,I,OCzGT+B,G,MAAO,CACD,MAAS,iBACT,YAAe,iBACf,MAAS,OA2BNC,E,YAxBX,WAAY/B,GAAQ,IAAD,8BACf,4CAAMA,KACDgC,KAAO,EAAKhC,MAAMiC,SAAShC,MAAM+B,KACtC,EAAKE,KAAO,EAAKF,KAAL,KACZ,EAAKG,SAAW,EAAKH,KAAK,aAC1B,EAAKI,SAAW,EAAKJ,KAAK,aAC1B,EAAKK,SAAW,EAAKF,SAAW,EAAKH,KAAK,sBAAwB,CAACF,GACnE,EAAKQ,SAAW,EAAKF,SAAW,EAAKJ,KAAK,sBAAwB,CAACF,GAPpD,E,sEAUf,OACA,6BACI,gCAAM1B,KAAK8B,MACX,4BACC9B,KAAKkC,SAASZ,IAAI,SAAAR,GAAI,OACnB,wBAAIS,IAAKT,EAAI,OACT,2BAAIA,EAAI,MAAR,KAAqBA,EAAI,YAAzB,KAA4CA,EAAI,MAAhD,c,GAjBMZ,aCWXiC,E,iLAVX,OACE,kBAAC,IAAD,KACA,yBAAKjB,UAAU,OACb,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAO0C,KAAK,eAAeC,UAAWX,U,GAN5BzB,aCMEqC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c1652da7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Program.css';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\n\nconst coursedata = require('./scrape_data/coursedata.json');\n\n\nclass Programs extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        list: coursedata\n      };\n    }\n\n    render() {\n        return (\n            <div>\n                <List items={this.state.list} />\n            </div>\n            );\n        }\n    }\n  \n  class List extends React.Component {\n      constructor(props) {\n          super(props);\n          this.state = {\n              filtered: []\n          };\n          this.handleChange = this.handleChange.bind(this);\n      }\n      \n      componentDidMount() {\n      this.setState({\n        filtered: this.props.items\n      });\n    }\n  \n    componentWillReceiveProps(nextProps) {\n      this.setState({\n        filtered: nextProps.items\n      });\n    }\n      \n      handleChange(e) {\n          // Variable to hold the original version of the list\n      let currentList = [];\n          // Variable to hold the filtered list before putting into state\n      let newList = [];\n          \n          // If the search bar isn't empty\n      if (e.target.value !== \"\") {\n              // Assign the original list to currentList\n        currentList = this.props.items;\n              \n              // Use .filter() to determine which items should be displayed\n              // based on the search terms\n        newList = currentList.filter(item => {\n                  // change current item to lowercase\n          const lc = item[\"Name\"].toLowerCase();\n                  // change search term to lowercase\n          const filter = e.target.value.toLowerCase();\n                  // check to see if the current list item includes the search term\n                  // If it does, it will be added to newList. Using lowercase eliminates\n                  // issues with capitalization in search terms and search content\n          return lc.includes(filter);\n        });\n      } else {\n              // If the search bar is empty, set newList to original task list\n        newList = this.props.items;\n      }\n          // Set the filtered state based on what our rules added to newList\n      this.setState({\n        filtered: newList\n      });\n    }\n      \n      render() {\n          return (\n            <div>\n                <div className=\"search\">\n                    <input type=\"text\" className=\"input\" onChange={this.handleChange} placeholder=\"Search...\" />\n                    <ul>\n                        {this.state.filtered.map(item => (\n                            <li key={item[\"Name\"]} >\n                                {/*\n                                <a href={item[\"Homepage URL\"]} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {item[\"Name\"]}\n                                </a>\n                                */}\n\n                                <Link to={{\n                                  pathname:\"requirement\",\n                                  state: {\"data\":item}\n                                  }}>\n                                  {item[\"Name\"]}\n                                </Link>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n          )\n      }\n  }\nexport default Programs;","import React, { Component } from 'react';\nimport './requirement.css'\nconst temp = {\n            \"title\": \"DOES NOT EXIST\",\n            \"description\": \"DOES NOT EXIST\",\n            \"units\": \"-1\"\n            }\nclass Requirement extends Component {\n    constructor(props) {\n        super(props);\n        this.data = this.props.location.state.data\n        this.name = this.data[\"Name\"]\n        this.hasmajor = this.data[\"Has Major\"]\n        this.hasminor = this.data[\"Has Minor\"]\n        this.majorreq = this.hasmajor ? this.data[\"Major Requirements\"] : [temp]\n        this.minorreq = this.hasminor ? this.data[\"Minor Requirements\"] : [temp]\n    }\n    render() {\n        return (\n        <div>\n            <h1> {this.name}</h1>\n            <ul>\n            {this.minorreq.map(item => (\n                <li key={item[\"title\"]}>\n                    <p>{item[\"title\"]}: {item[\"description\"]} [{item[\"units\"]}]</p>\n                </li>\n            ))}\n            </ul>\n        </div>\n        );\n    }\n}\nexport default Requirement;","import React, { Component } from 'react';\nimport './App.css';\nimport Programs from './Program.js'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Requirement from './Requirement.js'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Programs}/>\n        <Route path=\"/requirement\" component={Requirement} />\n      </div>\n      </Router>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}