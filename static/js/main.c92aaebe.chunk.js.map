{"version":3,"sources":["Program.js","Requirement.js","App.js","serviceWorker.js","index.js"],"names":["coursedata","require","Programs","props","state","list","items","this","React","Component","List","filtered","handleChange","bind","setState","nextProps","e","newList","target","value","filter","item","lc","toLowerCase","includes","className","type","onChange","placeholder","map","key","to","pathname","temp","Requirement","data","location","name","hasmajor","hasminor","majorreq","minorreq","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mxknCAKMA,EAAaC,EAAQ,IAGrBC,E,YACF,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAML,GAHS,E,sEAQf,OACI,6BACI,kBAAC,EAAD,CAAMM,MAAOC,KAAKH,MAAMC,Y,GAXjBG,IAAMC,WAiBrBC,E,YACF,WAAYP,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTO,SAAU,IAEd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALL,E,iFASnBN,KAAKO,SAAS,CACZH,SAAUJ,KAAKJ,MAAMG,U,gDAICS,GACxBR,KAAKO,SAAS,CACZH,SAAUI,EAAUT,U,mCAITU,GAEb,IAEIC,EAAU,GASZA,EANqB,KAAnBD,EAAEE,OAAOC,MAEGZ,KAAKJ,MAAMG,MAIHc,OAAO,SAAAC,GAE3B,IAAMC,EAAKD,EAAI,KAASE,cAElBH,EAASJ,EAAEE,OAAOC,MAAMI,cAI9B,OAAOD,EAAGE,SAASJ,KAIXb,KAAKJ,MAAMG,MAGvBC,KAAKO,SAAS,CACZH,SAAUM,M,+BAKR,OACE,6BACI,yBAAKQ,UAAU,UACX,2BAAOC,KAAK,OAAOD,UAAU,QAAQE,SAAUpB,KAAKK,aAAcgB,YAAY,cAC9E,4BACKrB,KAAKH,MAAMO,SAASkB,IAAI,SAAAR,GAAI,OACzB,wBAAIS,IAAKT,EAAI,MAOT,kBAAC,IAAD,CAAMU,GAAI,CACRC,SAAS,cACT5B,MAAO,CAAC,KAAOiB,KAEdA,EAAI,gB,GAxElBb,IAAMC,WAkFZP,I,OCzGT+B,G,MAAO,CACD,MAAS,iBACT,YAAe,GACf,MAAS,KAoCNC,E,YAjCX,WAAY/B,GAAQ,IAAD,8BACf,4CAAMA,KACDgC,KAAO,EAAKhC,MAAMiC,SAAShC,MAAM+B,KACtC,EAAKE,KAAO,EAAKF,KAAL,KACZ,EAAKG,SAAW,EAAKH,KAAK,aAC1B,EAAKI,SAAW,EAAKJ,KAAK,aAC1B,EAAKK,SAAW,EAAKF,SAAW,EAAKH,KAAK,sBAAwB,CAACF,GACnE,EAAKQ,SAAW,EAAKF,SAAW,EAAKJ,KAAK,sBAAwB,CAACF,GAPpD,E,sEAST,IAAD,OACL,OACA,6BACI,gCAAM1B,KAAK8B,MACX,oDACA,4BACC9B,KAAKiC,SAASX,IAAI,SAAAR,GAAI,OACnB,wBAAIS,IAAKT,EAAI,OACT,2BAAIA,EAAI,MAAR,IAAoB,EAAKiB,SAAW,KAAO,GAA3C,IAAgDjB,EAAI,YAApD,IAAsE,EAAKiB,SAAW,MAAQ,GAA9F,IAAmGjB,EAAI,WAI/G,oDACA,4BACCd,KAAKkC,SAASZ,IAAI,SAAAR,GAAI,OACnB,wBAAIS,IAAKT,EAAI,OACT,2BAAIA,EAAI,MAAR,IAAoB,EAAKkB,SAAW,KAAO,GAA3C,IAAgDlB,EAAI,YAApD,KAAuE,EAAKkB,SAAW,MAAQ,GAA/F,IAAoGlB,EAAI,gB,GA1BlGZ,aCWXiC,E,iLAVX,OACE,kBAAC,IAAD,KACA,yBAAKjB,UAAU,OACb,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIC,UAAW3C,IACjC,kBAAC,IAAD,CAAO0C,KAAK,eAAeC,UAAWX,U,GAN5BzB,aCMEqC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c92aaebe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Program.css';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\n\r\nconst coursedata = require('./scrape_data/coursedata.json');\r\n\r\n\r\nclass Programs extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        list: coursedata\r\n      };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <List items={this.state.list} />\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n  \r\n  class List extends React.Component {\r\n      constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n              filtered: []\r\n          };\r\n          this.handleChange = this.handleChange.bind(this);\r\n      }\r\n      \r\n      componentDidMount() {\r\n      this.setState({\r\n        filtered: this.props.items\r\n      });\r\n    }\r\n  \r\n    componentWillReceiveProps(nextProps) {\r\n      this.setState({\r\n        filtered: nextProps.items\r\n      });\r\n    }\r\n      \r\n      handleChange(e) {\r\n          // Variable to hold the original version of the list\r\n      let currentList = [];\r\n          // Variable to hold the filtered list before putting into state\r\n      let newList = [];\r\n          \r\n          // If the search bar isn't empty\r\n      if (e.target.value !== \"\") {\r\n              // Assign the original list to currentList\r\n        currentList = this.props.items;\r\n              \r\n              // Use .filter() to determine which items should be displayed\r\n              // based on the search terms\r\n        newList = currentList.filter(item => {\r\n                  // change current item to lowercase\r\n          const lc = item[\"Name\"].toLowerCase();\r\n                  // change search term to lowercase\r\n          const filter = e.target.value.toLowerCase();\r\n                  // check to see if the current list item includes the search term\r\n                  // If it does, it will be added to newList. Using lowercase eliminates\r\n                  // issues with capitalization in search terms and search content\r\n          return lc.includes(filter);\r\n        });\r\n      } else {\r\n              // If the search bar is empty, set newList to original task list\r\n        newList = this.props.items;\r\n      }\r\n          // Set the filtered state based on what our rules added to newList\r\n      this.setState({\r\n        filtered: newList\r\n      });\r\n    }\r\n      \r\n      render() {\r\n          return (\r\n            <div>\r\n                <div className=\"search\">\r\n                    <input type=\"text\" className=\"input\" onChange={this.handleChange} placeholder=\"Search...\" />\r\n                    <ul>\r\n                        {this.state.filtered.map(item => (\r\n                            <li key={item[\"Name\"]} >\r\n                                {/*\r\n                                <a href={item[\"Homepage URL\"]} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                {item[\"Name\"]}\r\n                                </a>\r\n                                */}\r\n\r\n                                <Link to={{\r\n                                  pathname:\"requirement\",\r\n                                  state: {\"data\":item}\r\n                                  }}>\r\n                                  {item[\"Name\"]}\r\n                                </Link>\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n          )\r\n      }\r\n  }\r\nexport default Programs;","import React, { Component } from 'react';\r\nimport './requirement.css'\r\nconst temp = {\r\n            \"title\": \"DOES NOT EXIST\",\r\n            \"description\": \"\",\r\n            \"units\": \"\"\r\n            }\r\nclass Requirement extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.data = this.props.location.state.data\r\n        this.name = this.data[\"Name\"]\r\n        this.hasmajor = this.data[\"Has Major\"]\r\n        this.hasminor = this.data[\"Has Minor\"]\r\n        this.majorreq = this.hasmajor ? this.data[\"Major Requirements\"] : [temp]\r\n        this.minorreq = this.hasminor ? this.data[\"Minor Requirements\"] : [temp]\r\n    }\r\n    render() {\r\n        return (\r\n        <div>\r\n            <h1> {this.name}</h1>\r\n            <h2> Major Requirements </h2>\r\n            <ul>\r\n            {this.majorreq.map(item => (\r\n                <li key={item[\"title\"]}>\r\n                    <p>{item[\"title\"]} {this.hasmajor ? \"- \" : \"\"} {item[\"description\"]} {this.hasmajor ? \" - \" : \"\"} {item[\"units\"]}</p>\r\n                </li>\r\n            ))}\r\n            </ul>\r\n            <h2> Minor Requirements </h2>\r\n            <ul>\r\n            {this.minorreq.map(item => (\r\n                <li key={item[\"title\"]}>\r\n                    <p>{item[\"title\"]} {this.hasminor ? \"- \" : \"\"} {item[\"description\"]}  {this.hasminor ? \" - \" : \"\"} {item[\"units\"]}</p>\r\n                </li>\r\n            ))}\r\n            </ul>\r\n        </div>\r\n        );\r\n    }\r\n}\r\nexport default Requirement;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Programs from './Program.js'\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Requirement from './Requirement.js'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div className=\"App\">\r\n        <Route exact path=\"/\" component={Programs}/>\r\n        <Route path=\"/requirement\" component={Requirement} />\r\n      </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}